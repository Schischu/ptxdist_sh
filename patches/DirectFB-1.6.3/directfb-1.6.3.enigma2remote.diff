--- DirectFB-1.4.11/configure.in	2012-03-13 04:11:46.537293991 -0700
+++ DirectFB-1.4.11_2/configure.in	2012-03-13 03:34:20.925293996 -0700
@@ -1722,6 +1722,7 @@
 checkfor_dbox2remote=no
 checkfor_dreamboxremote=no
 checkfor_dynapro=no
+checkfor_enigma2remote=no
 checkfor_elo=no
 checkfor_gunze=no
 checkfor_h3600ts=no
@@ -1746,7 +1747,7 @@
                            [LIST is a comma separated selection of]
                            [inputdrivers to build. Possible inputdrivers]
                            [are: all (builds all drivers), none (builds none),]
-                           [dbox2remote, dreamboxremote, dynapro, elo-input,]
+                           [dbox2remote, dreamboxremote, dynapro, enigma2remote, elo-input,]
                            [gunze, h3600_ts, input_hub, joystick, keyboard, linuxinput,]
                            [lirc, mutouch, penmount, ps2mouse, serialmouse,]
                            [sonypijogdial, tslib, ucb1x00, wm97xx, zytronic.]
@@ -1757,6 +1758,7 @@
   checkfor_dbox2remote=yes
   checkfor_dreamboxremote=yes
   checkfor_dynapro=no
+  checkfor_enigma2remote=yes
   checkfor_elo=no
   checkfor_gunze=no
   checkfor_h3600ts=yes
@@ -1790,6 +1792,9 @@
           dynapro)
                   checkfor_dynapro=yes
                   ;;
+          enigma2remote)
+                  checkfor_enigma2remote=yes
+                  ;;
           elo-input)
                   checkfor_elo=yes
                   ;;
@@ -1871,6 +1876,12 @@
   enable_dynapro_ts=yes
 fi
 
+enable_enigma2remote=no
+if test "$checkfor_enigma2remote" = "yes"; then
+  dnl Test for Enigma2 remote support
+  enable_enigma2remote=yes
+fi
+
 enable_elo_input=no
 if test "$checkfor_elo" = "yes"; then
   dnl Test for ELO Touchscreen support
@@ -2187,6 +2198,7 @@
 AM_CONDITIONAL(DBOX2REMOTE, test "$enable_dbox2remote" = "yes")
 AM_CONDITIONAL(DREAMBOXREMOTE, test "$enable_dreamboxremote" = "yes")
 AM_CONDITIONAL(DYNAPRO_INPUT, test "$enable_dynapro_ts" = "yes")
+AM_CONDITIONAL(ENIGMA2REMOTE, test "$enable_enigma2remote" = "yes")
 AM_CONDITIONAL(ELO_INPUT, test "$enable_elo_input" = "yes")
 AM_CONDITIONAL(GUNZE_INPUT, test "$enable_gunze_input" = "yes")
 AM_CONDITIONAL(H3600_TS, test "$enable_h3600_ts" = "yes")
@@ -2397,6 +2409,7 @@
 inputdrivers/dbox2remote/Makefile
 inputdrivers/dreamboxremote/Makefile
 inputdrivers/dynapro/Makefile
+inputdrivers/enigma2remote/Makefile
 inputdrivers/elo/Makefile
 inputdrivers/gunze/Makefile
 inputdrivers/h3600_ts/Makefile
@@ -2565,6 +2578,7 @@
   DBox2 Remote              $enable_dbox2remote
   DreamBox Remote           $enable_dreamboxremote
   Dynapro Touchscreen       $enable_dynapro_ts
+  Enigma2 Remote            $enable_enigma2remote
   ELO Touchscreen           $enable_elo_input
   Gunze Touchscreen         $enable_gunze_input
   H3600 Touchscreen         $enable_h3600_ts
--- DirectFB-1.4.11/inputdrivers/Makefile.am	2010-10-31 01:49:49.000000000 -0700
+++ DirectFB-1.4.11_2/inputdrivers/Makefile.am	2012-03-13 03:42:50.417293998 -0700
@@ -8,6 +8,10 @@
 DREAMBOXREMOTE_DIR = dreamboxremote
 endif
 
+if ENIGMA2REMOTE
+ENIGMA2REMOTE_DIR = enigma2remote
+endif
+
 if DYNAPRO_INPUT
 DYNAPRO_INPUT_DIR = dynapro
 endif
@@ -80,6 +84,7 @@
 	$(DBOX2REMOTE_DIR)	\
 	$(DREAMBOXREMOTE_DIR)	\
 	$(DYNAPRO_INPUT_DIR)	\
+	$(ENIGMA2REMOTE_DIR)	\
 	$(ELO_INPUT_DIR)	\
 	$(GUNZE_INPUT_DIR)	\
 	$(H3600_TS_DIR)		\
diff -Nur DirectFB-1.4.11/inputdrivers/enigma2remote/enigma2remote.c DirectFB-1.4.11_2/inputdrivers/enigma2remote/enigma2remote.c
--- DirectFB-1.4.11/inputdrivers/enigma2remote/enigma2remote.c	1969-12-31 16:00:00.000000000 -0800
+++ DirectFB-1.4.11_2/inputdrivers/enigma2remote/enigma2remote.c	2012-03-13 03:21:53.341293991 -0700
@@ -0,0 +1,309 @@
+/*
+   This library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2 of the License, or (at your option) any later version.
+
+   This library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with this library; if not, write to the
+   Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+   Boston, MA 02111-1307, USA.
+*/
+
+#include <string.h>
+#include <unistd.h>
+#include <errno.h>
+
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <sys/ioctl.h>
+
+#include <sys/socket.h>
+#include <sys/un.h>
+
+#include <fcntl.h>
+
+#include <directfb.h>
+
+#include <core/coredefs.h>
+#include <core/coretypes.h>
+#include <core/input.h>
+
+#include <direct/debug.h>
+#include <direct/mem.h>
+#include <direct/messages.h>
+#include <direct/thread.h>
+
+#include <core/input_driver.h>
+
+DFB_INPUT_DRIVER( enigma2remote )
+
+#define DEVICE "/tmp/rc_enigma2"
+
+typedef struct {
+     DFBInputDeviceKeySymbol  key;
+     char*                    rccode;
+} KeyCode;
+
+static KeyCode keycodes_remote[] = {
+     { DIKS_0, "0" },
+     { DIKS_1, "1" },
+     { DIKS_2, "2" },
+     { DIKS_3, "3" },
+     { DIKS_4, "4" },
+     { DIKS_5, "5" },
+     { DIKS_6, "6" },
+     { DIKS_7, "7" },
+     { DIKS_8, "8" },
+     { DIKS_9, "9" },
+     { DIKS_CURSOR_LEFT, "LEFT" },
+     { DIKS_CURSOR_RIGHT, "RIGHT" },
+     { DIKS_CURSOR_UP, "UP" },
+     { DIKS_CURSOR_DOWN, "DOWN" },
+     { DIKS_RETURN, "ENTER" },
+     { DIKS_OK, "OK" },
+     { DIKS_ESCAPE, "ESC" },
+     { DIKS_BACK, "BACK" },
+     { DIKS_RED, "RED" },
+     { DIKS_GREEN, "GREEN" },
+     { DIKS_YELLOW, "YELLOW" },
+     { DIKS_BLUE, "BLUE" },
+     { DIKS_PLAY, "PLAY" },
+     { DIKS_PAUSE, "PAUSE" },
+     { DIKS_STOP, "STOP" },
+
+     { DIKS_NULL, "" }
+};
+
+
+/*
+ * declaration of private data
+ */
+typedef struct {
+     CoreInputDevice  *device;
+     DirectThread *thread;
+
+     int           fd;
+} Enigma2remoteData;
+
+
+/*
+ * helper function for translating rccode
+ */
+static DFBInputDeviceKeySymbol
+enigma2remote_parse_rccode( char* rccode )
+{
+	KeyCode *keycode;
+	static  u16 rccodeOld = 0;
+
+	keycode = keycodes_remote;
+	
+	while (keycode->key != DIKS_NULL) {
+		if (!strcmp(keycode->rccode, rccode)) {
+			return keycode->key;
+		}
+		keycode++;
+	}
+	return DIKS_NULL;
+}
+
+/*
+ * Input thread reading from device.
+ * Generates events on incoming data.
+ */
+static void*
+enigma2remoteEventThread( DirectThread *thread, void *driver_data )
+{
+     Enigma2remoteData *data = (Enigma2remoteData*) driver_data;
+     int              readlen;
+     u16              rccode;
+     char recvBuffer[1024];
+     DFBInputEvent    evt;
+     int len;
+     struct sockaddr_un remote;
+
+     printf("Trying to connect...\n");
+
+     remote.sun_family = AF_UNIX;
+     strcpy(remote.sun_path, DEVICE);
+     len = strlen(remote.sun_path) + sizeof(remote.sun_family);
+     if (connect(data->fd, (struct sockaddr *)&remote, len) == -1) {
+          D_PERROR ("enigma2remote connect failes");
+          return NULL;
+     }
+
+     printf("Connected.\n");
+
+     while (1) {
+          int recvBufferPos = 0;
+          //if (readLineControlPipe(driver_data, recvBuffer, 1024) <= 0)
+          //     break;
+          
+          if ((readlen=recv(data->fd, recvBuffer, 1024, 0)) <= 0)
+              break;
+          recvBuffer[readlen] = '\0';
+          printf("CMD [\'%s\']\n", recvBuffer);
+          direct_thread_testcancel( thread );
+
+          while (1) { //OK\nENTER\n\0
+               int i;
+               char keyBuffer[16];
+               for (i = 0; i < readlen && i < 16 && recvBuffer[recvBufferPos + i] != '\n' && recvBuffer[recvBufferPos + i] != '\0'; i++) {
+                    keyBuffer[i] = recvBuffer[recvBufferPos + i];
+               }
+               if (i == 0) break;
+               keyBuffer[i] = '\0';
+               recvBufferPos += i + 1;
+
+               /* translate rccode to DirectFB keycode */
+               evt.key_symbol = enigma2remote_parse_rccode( keyBuffer );
+
+
+               printf("KEY [\'%s\' -> \'%d\']\n", keyBuffer, evt.key_symbol);
+
+               if (evt.key_symbol != DIKS_NULL) {
+                    /* set event type and dispatch*/
+                    evt.type = DIET_KEYPRESS;
+                    evt.flags = DIEF_KEYSYMBOL;
+                    dfb_input_dispatch( data->device, &evt );
+
+                    /* set event type and dispatch*/
+                    evt.type = DIET_KEYRELEASE;
+                    evt.flags = DIEF_KEYSYMBOL;
+                    dfb_input_dispatch( data->device, &evt );
+               }
+               if ( i >= readlen) break;
+          }
+     }
+
+     //if (readlen <= 0 && errno != EINTR)
+          D_PERROR ("enigma2remote thread died\n");
+
+     return NULL;
+}
+
+/* exported symbols */
+
+/*
+ * Return the number of available devices.
+ * Called once during initialization of DirectFB.
+ */
+static int
+driver_get_available( void )
+{
+     /* Check if we are able to read from device */
+     if (access( DEVICE, R_OK ))
+        return 0;
+
+     return 1;
+}
+
+/*
+ * Fill out general information about this driver.
+ * Called once during initialization of DirectFB.
+ */
+static void
+driver_get_info( InputDriverInfo *info )
+{
+     /* fill driver info structure */
+     snprintf ( info->name,
+                DFB_INPUT_DRIVER_INFO_NAME_LENGTH, "enigma2 remote" );
+     snprintf ( info->vendor,
+                DFB_INPUT_DRIVER_INFO_VENDOR_LENGTH, "mws" );
+
+     info->version.major = 0;
+     info->version.minor = 1;
+}
+
+/*
+ * Open the device, fill out information about it,
+ * allocate and fill private data, start input thread.
+ * Called during initialization, resuming or taking over mastership.
+ */
+static DFBResult
+driver_open_device( CoreInputDevice      *device,
+                    unsigned int      number,
+                    InputDeviceInfo  *info,
+                    void            **driver_data )
+{
+     int                  fd;
+     Enigma2remoteData    *data;
+
+     /* open device */
+     if ((fd = socket(AF_UNIX, SOCK_STREAM, 0)) == -1) {
+          D_PERROR( "DirectFB/dreamboxremote: could not open device" );
+          return DFB_INIT;
+     }
+
+     /* set device name */
+     snprintf( info->desc.name,
+               DFB_INPUT_DEVICE_DESC_NAME_LENGTH, "enigma2 remote control" );
+
+     /* set device vendor */
+     snprintf( info->desc.vendor,
+               DFB_INPUT_DEVICE_DESC_VENDOR_LENGTH, "ENIGMA2" );
+
+     /* set one of the primary input device IDs */
+     info->prefered_id = DIDID_REMOTE;
+
+     /* set type flags */
+     info->desc.type   = DIDTF_REMOTE;
+
+     /* set capabilities */
+     info->desc.caps   = DICAPS_KEYS;
+
+
+     /* allocate and fill private data */
+     data = D_CALLOC( 1, sizeof(Enigma2remoteData) );
+     if (!data) {
+          close( fd );
+          return D_OOM();
+     }
+
+     data->fd     = fd;
+     data->device = device;
+
+     /* start input thread */
+     data->thread = direct_thread_create( DTT_INPUT, enigma2remoteEventThread, data, "Enigma2 Input" );
+
+     /* set private data pointer */
+     *driver_data = data;
+
+     return DFB_OK;
+}
+
+/*
+ * Fetch one entry from the device's keymap if supported.
+ */
+static DFBResult
+driver_get_keymap_entry( CoreInputDevice               *device,
+                         void                      *driver_data,
+                         DFBInputDeviceKeymapEntry *entry )
+{
+     return DFB_UNSUPPORTED;
+}
+
+/*
+ * End thread, close device and free private data.
+ */
+static void
+driver_close_device( void *driver_data )
+{
+     Enigma2remoteData *data = (Enigma2remoteData*) driver_data;
+
+     /* stop input thread */
+     direct_thread_cancel( data->thread );
+     direct_thread_join( data->thread );
+     direct_thread_destroy( data->thread );
+
+     /* close file */
+     fclose( data->fd );
+
+     /* free private data */
+     D_FREE ( data );
+}
diff -Nur DirectFB-1.4.11/inputdrivers/enigma2remote/Makefile.am DirectFB-1.4.11_2/inputdrivers/enigma2remote/Makefile.am
--- DirectFB-1.4.11/inputdrivers/enigma2remote/Makefile.am	1969-12-31 16:00:00.000000000 -0800
+++ DirectFB-1.4.11_2/inputdrivers/enigma2remote/Makefile.am	2012-03-13 03:25:08.437293917 -0700
@@ -0,0 +1,32 @@
+## Makefile.am for DirectFB/inputdrivers/dreamboxremote
+
+INCLUDES = \
+	-I$(top_builddir)/include	\
+	-I$(top_builddir)/lib	\
+	-I$(top_srcdir)/include	\
+	-I$(top_srcdir)/lib	\
+	-I$(top_srcdir)/src
+
+enigma2remote_LTLIBRARIES = libdirectfb_enigma2remote.la
+
+if BUILD_STATIC
+enigma2remote_DATA = $(enigma2remote_LTLIBRARIES:.la=.o)
+endif
+
+enigma2remotedir = $(MODULEDIR)/inputdrivers
+
+libdirectfb_enigma2remote_la_SOURCES =	\
+	enigma2remote.c
+
+libdirectfb_enigma2remote_la_LDFLAGS = \
+	-module			\
+	-avoid-version		\
+	$(DFB_LDFLAGS)
+
+libdirectfb_enigma2remote_la_LIBADD = \
+	$(top_builddir)/lib/direct/libdirect.la \
+	$(top_builddir)/src/libdirectfb.la
+
+
+include $(top_srcdir)/rules/libobject.make
+	
